<?php

namespace Tests\Feature\Commands;

use RuntimeException;
use App\Commands\Open;
use App\Runners\CommandRunner;
use App\Services\Docker\Local\Config;

class OpenTest extends BaseCommandTester {

    private $runner;
    private $config;

    protected function setUp(): void {
        parent::setUp();

        $this->runner = $this->mock( CommandRunner::class );
        $this->config = $this->mock( Config::class );
    }

    public function testItOpensABrowserOnLinux() {
        $this->runner->shouldReceive( 'run' )->once()->with( 'which xdg-open' )->andReturnSelf();
        $this->runner->shouldReceive( 'run' )->once()->with( 'which open' )->andReturnSelf();
        $this->runner->shouldReceive( 'successful' )->once()->andReturnTrue();
        $this->runner->shouldReceive( 'run' )->once()->with( 'xdg-open https://tri.be' )->andReturnSelf();

        $command = $this->app->make( Open::class );
        $tester  = $this->runCommand( $command, [
            'url' => 'https://tri.be',
        ] );

        $this->assertSame( 0, $tester->getStatusCode() );
    }

    public function testItCanOpenABrowserOnOsx() {
        $this->runner->shouldReceive( 'run' )->once()->with( 'which xdg-open' )->andReturnSelf();
        $this->runner->shouldReceive( 'run' )->once()->with( 'which open' )->andReturnSelf();
        $this->runner->shouldReceive( 'successful' )->once()->andReturnFalse();
        $this->runner->shouldReceive( 'successful' )->once()->andReturnTrue();
        $this->runner->shouldReceive( 'run' )->once()->with( 'open https://tri.be' )->andReturnSelf();

        $command = $this->app->make( Open::class );
        $tester  = $this->runCommand( $command, [
            'url' => 'https://tri.be',
        ] );

        $this->assertSame( 0, $tester->getStatusCode() );
    }

    /**
     * @runInSeparateProcess
     * @preserveGlobalState disabled
     *
     * @throws \Illuminate\Contracts\Container\BindingResolutionException
     */
    public function testItOpensABrowserOnWindows() {
        define( 'PHP_WINDOWS_VERSION_MAJOR', true );

        $this->runner->shouldReceive( 'run' )->with( 'start "web" explorer "https://tri.be"' )->once()->andReturnSelf();

        $command = $this->app->make( Open::class );
        $tester  = $this->runCommand( $command, [
            'url' => 'https://tri.be',
        ] );

        $this->assertSame( 0, $tester->getStatusCode() );
    }

    public function testItOpensASquareOneProjectUrl() {
        $this->config->shouldReceive( 'getProjectUrl' )->once()->andReturn( 'https://square1.tribe' );
        $this->runner->shouldReceive( 'run' )->once()->with( 'which xdg-open' )->andReturnSelf();
        $this->runner->shouldReceive( 'run' )->once()->with( 'which open' )->andReturnSelf();
        $this->runner->shouldReceive( 'successful' )->once()->andReturnTrue();
        $this->runner->shouldReceive( 'run' )->once()->with( 'xdg-open https://square1.tribe' )->andReturnSelf();

        $command = $this->app->make( Open::class );
        $tester  = $this->runCommand( $command );

        $this->assertSame( 0, $tester->getStatusCode() );
    }

    public function testItShowsErrorOnMissingUrlOrSquareOneProject() {
        $command = $this->app->make( Open::class );

        $tester = $this->runCommand( $command );
        $this->assertSame( 1, $tester->getStatusCode() );
        $this->assertStringContainsString( 'Please provide a valid URL or ensure this is run inside a SquareOne project', $tester->getDisplay() );
    }

    public function testItCannotOpenABrowser() {
        $this->expectException( RuntimeException::class );
        $this->expectExceptionCode( 1 );
        $this->expectExceptionMessage( 'Unable to find xdg-open, open or start executables' );

        $this->runner->shouldReceive( 'run' )->with( 'which xdg-open' )->once()->andReturnSelf();
        $this->runner->shouldReceive( 'run' )->with( 'which open' )->once()->andReturnSelf();
        $this->runner->shouldReceive( 'successful' )->twice()->andReturnFalse();

        $command = $this->app->make( Open::class );

        $this->runCommand( $command, [
            'url' => 'https://tri.be',
        ] );
    }

}
